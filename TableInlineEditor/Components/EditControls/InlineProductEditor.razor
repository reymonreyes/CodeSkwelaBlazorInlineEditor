@using TableInlineEditor.Services.Models
@using System.Linq;
@inject IJSRuntime JS

<tr>
    @if (isEditMode)
    {        
        <td>@Product.ProductID</td>
        <td>
            <EditForm @ref="editForm" Model="Product" FormName="EditProduct" OnValidSubmit="Save">
                <DataAnnotationsValidator/>
                <InputText @bind-Value="Product.ProductName" class="form-control"/>
                <ValidationMessage For="() => Product.ProductName"/>
            </EditForm>
        </td>
        <td>
            <EditForm @ref="editForm" Model="Product" FormName="EditProduct" OnValidSubmit="Save">
                <DataAnnotationsValidator/>
                <InputSelect @bind-Value="Product.CategoryID" class="form-select" DisplayName="Category">
                    <option value=""></option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CategoryID">@category.CategoryName</option>
                    }
                </InputSelect>               
                <ValidationMessage For="() => Product.CategoryID"/>
            </EditForm>
        </td>
        <td>
            <EditForm @ref="editForm" Model="Product" FormName="EditProduct" OnValidSubmit="Save">
                <DataAnnotationsValidator/>
                <InputNumber @bind-Value="Product.UnitPrice" class="form-control" />
                <ValidationMessage For="() => Product.UnitPrice"/>
            </EditForm>
        </td>
        <td>
            <EditForm @ref="editForm" Model="Product" FormName="EditProduct" OnValidSubmit="Save">
                <DataAnnotationsValidator/>
                <InputCheckbox @bind-Value="Product.Discontinued" />
            </EditForm>
        </td>
        <td>
            <EditForm Model="Product" FormName="EditProduct" OnValidSubmit="Save">
                <button type="submit" class="btn btn-primary btn-sm">Save</button>
                <button class="btn btn-secondary btn-sm" @onclick="Cancel">Cancel</button>
            </EditForm>
        </td>
    }
    else
    {
        <td>@Product.ProductID</td>
        <td>@Product.ProductName</td>
        <td>@Product.Category.CategoryName</td>
        <td class="text-end">@Product.UnitPrice</td>
        <td>
            @if (Product.Discontinued)
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" checked disabled>
                </div>
            }
            else
            {
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" disabled>
                </div>
            }
        </td>
        <td>
            <button class="btn btn-primary btn-sm" @onclick="Edit">Edit</button>
            <button class="btn btn-danger btn-sm" @onclick="Delete">Delete</button>            
        </td>
    }
</tr>

@code {
    private bool isEditMode = false;
    private Product originalProduct;
    private EditForm editForm;

    [Parameter]
    public Product Product { get; set; }
    [Parameter]
    public List<Category> Categories { get; set; }
    [Parameter]
    public EventCallback<Product> OnSave { get; set; }
    [Parameter]
    public EventCallback<int> OnDelete { get; set; }


    private void Edit()
    {
        isEditMode = true;
        originalProduct = new Product { ProductName = Product.ProductName, CategoryID = Product.CategoryID, UnitPrice = Product.UnitPrice, Discontinued = Product.Discontinued };
    }

    private async Task Save()
    {
        var isValid = editForm.EditContext.Validate();

        if (!isValid)
            return;

        isEditMode = false;
        await OnSave.InvokeAsync(Product);
    }

    private async Task Delete()
    {
        var message = $"Are you sure you want to delete this product?\n{Product.ProductName}";
        var confirmed = await JS.InvokeAsync<bool>("confirm", message);

        await OnDelete.InvokeAsync(confirmed ? Product.ProductID : 0);
    }

    private void Cancel()
    {
        isEditMode = false;
        Product.ProductName = originalProduct.ProductName;
        Product.CategoryID = originalProduct.CategoryID;
        Product.UnitPrice = originalProduct.UnitPrice;
        Product.Discontinued = originalProduct.Discontinued;
    }
}
